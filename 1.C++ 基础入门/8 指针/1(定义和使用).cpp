/*           1 指针变量的定义和使用

指针变量定义语法： 数据类型 * 变量名； 	int* p;
*/

/*
注意:
1.	int* p 的写法偏向于地址,即p就是一个地址变量.表示一个16进制地址.
2.	int *p 的写法偏向于值, *p 是一个整形变量,能够表示一个整形值.
	(建议两者相结合进行理解)
3.	声明中的*号和使用中的*号含义完全不同.
*/
#include <iostream>

using namespace std;
int main()
{

				// 1. 定义指针:

	int a = 10; //定义整型变量a

	//指针定义语法： 数据类型 * 变量名 ;
	int* p;

	//让指针记录变量a的位置
	p = &a;				//指针指向变量a的地址(用取值符). 把a的地址存在了p里.
	cout << &a << endl; //打印数据a的地址 : 00CFFA5C
	cout << p << endl;	//打印指针变量p	  : 00CFFA5C
	cout << *p << endl;	// 解引用p的值: 10

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				//2、指针的使用

	// 可以通过解引用的方式来找到指针指向的内存
	// 指针前加 * 代表解引用， 找到指针指向的内存中的数据
	cout <<  *p << endl; // 10 = a

	// 还可以间接修改它
	*p = 1000;	// 相当于 a = 1000;
	cout << "a= " << a << endl;	  // 1000 : 间接把变量 a 也修改了
	cout << "*p= " << *p << endl; // 1000

	return 0;
}

/*
指针变量和普通变量的区别

* 普通变量存放的是数据,指针变量存放的是地址
* 指针变量可以通过" * "操作符，操作指针变量指向的内存空间，这个过程称为解引用

> 总结1： 我们可以通过 & 符号 获取变量的地址

> 总结2：利用指针可以记录地址

> 总结3：对指针变量解引用，可以操作指针指向的内存
*/